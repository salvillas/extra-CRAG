git status -> Te dice qué tiene en el stage (qué has añadido con git add)
git add -> añades directorios o archivos al stage
git commit -m "" -> confirmas todo aquello que está en el stage. Debes añadir un mensaje que lo defina
git log -> te informa de todos los commit que has hecho. Debes bajar con la barra espaciadora, y para salir, usar "q".
git reset file -> sacas un file concreto que se encuentre en el stage tras haberlo añadido con git add.
git checkout file -> deshace todos los cambios que hayas hecho en el file, siempre que no se encuentre en el stage, desde el último commit.
git diff file -> te cuenta qué diferencias hay en este archivo desde su último commit
HEAD -> hace referencia al último commit
HEAD~1 -> hace referencia al penúltimo commit... y así sucesivamente
Text Editor commands:
Ctrl-K: delete a line.
Ctrl-U: un-delete a line.
Ctrl-O: save the file ('O' stands for 'output').
Ctrl-X: exit the editor.

git commit --amend -m "" -> te permite cambiar el mensaje del commit anterior si te equivocaste
hash -> código hexadecimal que identifica a cada commit. Puedes hacer referencia a él sólo con las 4 primeras

git show hash -> te muestra el commit específico del hash que uses para identificarlo
git annotate file -> te muestra todas las modificaciones de un file específico
git diff hash1..hash2 -> te muestra las diferencias entre 2 commit específicos
.gitignore -> ignoras repositories o files especícos
git clean -n -> te informa de qué archivos de tu repositorio están "untracked"
git clean -f -> eliminas dichos archivos
git config --list --system -> te da los settings de todos los usuarios de este ordenador
git config --list --global -> te da los settings de todos los usuarios de tus proyectos
git config --list --local -> te da los settings de todos los usuarios de este proyecto en concreto
git config --global setting value -> te permite cambiar un setting concreto por el value nuevo que le quieras dar

git checkout hash file -> te permite recuperar una versión anterior de archivo file, indicando su hash.
git log -4 file -> te permite ver solamente los últimos commit que selecciones (4) de un file específico

cat file -> te muestra el contenido de un file

git branch -> te indica las distintas ramas existentes, y con un * te indica en cuál te encuentras
git diff branch1..branch2 -> te indica las diferencias entre 2 ramas
git checkout branch -> cambias hacia la rama que indiques en branch
git branch name -> se crea una nueva rama, con el nombre que pongas en name, pero no te mueves a ella
git checkout -b name-> creas una nueva rama con el nombre que indicques en name, y te mueves a ella 

git rm file -> eliminas el file espefício. Debe hacer un commit a continuación para confirmarlo. Si eliminas un file en una rama, ese file desaparece. Pero si te mueves a otra rama en la que ese file existía, vuelves a disponer de él con la última versión realizada en esa rama.

git merge source destination -> mezclas la rama source en la rama destination. Se abrirá un editor para incluir un mesaje. Si no hay conflictos, todo irá bien. 

git init project-name -> creas un nuevo repositorio en el directorio con el nombre que des en project-name. No es recomendable crear un repositorio dentro de otro
git clone -> te permite clonar un proyecto de Git a partir del repositorio (local) o la URL (remoto) que le indiques
git remote -> te indica los nombres de los remotos cuando has clonado uno
git remote -v -> te indica las URLs
git remote add remote-name URL -> añades nuevos remotos
git remote rm remote-name -> eliminas remotos

git remote add origin URL -> te conectas a la rama origin de la URL del proyecto online de GitHub que selecciones
git push -u origin master -> envías a la rama origin remota tu rama master
git pull origin master -> traes los cambios del repositorio remoto a tu repositorio local