git status -> Te dice qué tiene en el stage (qué has añadido con git add)
git add -> añades directorios o archivos al stage
git commit -m "" -> confirmas todo aquello que está en el stage. Debes añadir un mensaje que lo defina
git log -> te informa de todos los commit que has hecho. Debes bajar con la barra espaciadora, y para salir, usar "q".
git reset file -> sacas un file concreto que se encuentre en el stage tras haberlo añadido con git add.
git checkout file -> deshace todos los cambios que hayas hecho en el file, siempre que no se encuentre en el stage, desde el último commit.
git diff file -> te cuenta qué diferencias hay en este archivo desde su último commit
HEAD -> hace referencia al último commit
HEAD~1 -> hace referencia al penúltimo commit... y así sucesivamente
Text Editor commands:
Ctrl-K: delete a line.
Ctrl-U: un-delete a line.
Ctrl-O: save the file ('O' stands for 'output').
Ctrl-X: exit the editor.

git commit --amend -m "" -> te permite cambiar el mensaje del commit anterior si te equivocaste
hash -> código hexadecimal que identifica a cada commit. Puedes hacer referencia a él sólo con las 4 primeras

git show hash -> te muestra el commit específico del hash que uses para identificarlo
git annotate file -> te muestra todas las modificaciones de un file específico
git diff hash1..hash2 -> te muestra las diferencias entre 2 commit específicos
.gitignore -> ignoras repositories o files especícos
git clean -n -> te informa de qué archivos de tu repositorio están "untracked"
git clean -f -> eliminas dichos archivos
git config --list --system -> te da los settings de todos los usuarios de este ordenador
git config --list --global -> te da los settings de todos los usuarios de tus proyectos
git config --list --local -> te da los settings de todos los usuarios de este proyecto en concreto
git config --global setting value -> te permite cambiar un setting concreto por el value nuevo que le quieras dar
